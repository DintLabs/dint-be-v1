# Generated by Django 2.2 on 2023-03-20 17:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('password', models.CharField(blank=True, max_length=254, null=True)),
                ('remember_token', models.CharField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_no', models.CharField(blank=True, help_text='Contact phone number', max_length=17, null=True)),
                ('desription', models.TextField(blank=True, null=True)),
                ('fire_base_auth_key', models.CharField(blank=True, max_length=250, null=True)),
                ('referral_id', models.CharField(blank=True, max_length=30, null=True)),
                ('wallet_address', models.BinaryField(blank=True, null=True)),
                ('wallet_private_key', models.BinaryField(blank=True, null=True)),
                ('custom_username', models.CharField(blank=True, max_length=50, null=True)),
                ('display_name', models.CharField(blank=True, max_length=40, null=True)),
                ('bio', models.CharField(blank=True, max_length=1000, null=True)),
                ('location', models.CharField(blank=True, max_length=64, null=True)),
                ('website_url', models.CharField(blank=True, max_length=100, null=True)),
                ('amazon_wishlist', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_image', models.URLField(blank=True, max_length=500, null=True)),
                ('banner_image', models.URLField(blank=True, max_length=500, null=True)),
                ('city', models.CharField(blank=True, max_length=1000, null=True)),
                ('twitter', models.CharField(blank=True, max_length=1000, null=True)),
                ('instagram', models.CharField(blank=True, max_length=1000, null=True)),
                ('discord', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('able_to_be_found', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('otp_varification', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_send_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_online', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('connections', models.IntegerField(default=0)),
                ('email_token', models.CharField(blank=True, max_length=255, null=True)),
                ('email_token_valid', models.DateTimeField(blank=True, null=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('is_referred', models.BooleanField(default=False)),
                ('user_wallet_balance', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'auth_user',
            },
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'chat_room',
            },
        ),
        migrations.CreateModel(
            name='ConfineUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_block_type', models.CharField(choices=[('block', 'block'), ('restrict', 'restrict'), ('none', 'none')], default='none', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CreditCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=32)),
                ('state', models.CharField(max_length=32)),
                ('street', models.TextField()),
                ('city', models.CharField(max_length=32)),
                ('zip_code', models.CharField(max_length=16)),
                ('email', models.EmailField(max_length=254)),
                ('card_name', models.CharField(default='', max_length=32)),
                ('card_token', models.CharField(max_length=56)),
                ('card_type', models.CharField(default='', max_length=32)),
                ('fund', models.IntegerField(default=0)),
                ('card_number', models.IntegerField(default=0)),
                ('customer_id', models.CharField(default='', max_length=48)),
                ('card_id', models.CharField(default='', max_length=48)),
                ('default_card', models.BooleanField(default=False)),
                ('card_expired', models.CharField(default='', max_length=16)),
                ('is_activate', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('eventFequency', models.CharField(blank=True, max_length=50, null=True)),
                ('balanceFrequency', models.CharField(blank=True, max_length=50, null=True)),
                ('eventDate', models.DateField(default=django.utils.timezone.now)),
                ('eventDescription', models.CharField(blank=True, max_length=50, null=True)),
                ('eventEndTime', models.TimeField(blank=True, null=True)),
                ('eventId', models.IntegerField(blank=True, null=True)),
                ('eventName', models.CharField(blank=True, max_length=50, null=True)),
                ('eventPhoto', models.URLField(blank=True, max_length=500, null=True)),
                ('eventstartTime', models.TimeField(blank=True, null=True)),
                ('eventDateCreated', models.DateField(default=django.utils.timezone.now)),
                ('network', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenDecimal', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenIcon', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenName', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenSymbol', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenType', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenAddress', models.CharField(blank=True, max_length=50, null=True)),
                ('valueName', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'events',
            },
        ),
        migrations.CreateModel(
            name='FreeTrial',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('offer_limit', models.IntegerField(blank=True, default=1, null=True)),
                ('offer_expiration', models.IntegerField(blank=True, default=1, null=True)),
                ('trial_duration', models.IntegerField(blank=True, default=1, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'free_trial',
            },
        ),
        migrations.CreateModel(
            name='HistoricalChatRoom',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical chat room',
                'db_table': 'chat_room_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEvents',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('eventFequency', models.CharField(blank=True, max_length=50, null=True)),
                ('balanceFrequency', models.CharField(blank=True, max_length=50, null=True)),
                ('eventDate', models.DateField(default=django.utils.timezone.now)),
                ('eventDescription', models.CharField(blank=True, max_length=50, null=True)),
                ('eventEndTime', models.TimeField(blank=True, null=True)),
                ('eventId', models.IntegerField(blank=True, null=True)),
                ('eventName', models.CharField(blank=True, max_length=50, null=True)),
                ('eventPhoto', models.URLField(blank=True, max_length=500, null=True)),
                ('eventstartTime', models.TimeField(blank=True, null=True)),
                ('eventDateCreated', models.DateField(default=django.utils.timezone.now)),
                ('network', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenDecimal', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenIcon', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenName', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenSymbol', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenType', models.CharField(blank=True, max_length=50, null=True)),
                ('tokenAddress', models.CharField(blank=True, max_length=50, null=True)),
                ('valueName', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical events',
                'db_table': 'events_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFreeTrial',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('offer_limit', models.IntegerField(blank=True, default=1, null=True)),
                ('offer_expiration', models.IntegerField(blank=True, default=1, null=True)),
                ('trial_duration', models.IntegerField(blank=True, default=1, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical free trial',
                'db_table': 'free_trial_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMessageMedia',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('media', models.URLField(max_length=1000)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical message media',
                'db_table': 'message_media_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMessages',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('is_seen', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical messages',
                'db_table': 'messages_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPage',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('page_name', models.CharField(blank=True, max_length=30, null=True)),
                ('title', models.CharField(blank=True, max_length=80, null=True)),
                ('desciption', models.CharField(blank=True, max_length=80, null=True)),
                ('type', models.CharField(blank=True, max_length=80, null=True)),
                ('profile_picture', models.URLField(blank=True, max_length=1000, null=True)),
                ('cover_picture', models.URLField(blank=True, max_length=1000, null=True)),
                ('subscribe_amount', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical page',
                'db_table': 'page_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPostComments',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('room_type', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical post comments',
                'db_table': 'post_comments_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPostLikes',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical post likes',
                'db_table': 'post_likes_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPosts',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('media', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('amount', models.IntegerField(blank=True, default=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical posts',
                'db_table': 'posts_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPromotionCampaign',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('campaign_type', models.IntegerField(default=1, help_text='1. New User, 2. Expired Subscriber User 3. Both')),
                ('offer_limit', models.IntegerField(default=5)),
                ('offer_expiration_in_days', models.IntegerField(default=5)),
                ('discount_percentage', models.FloatField(blank=True, null=True)),
                ('message', models.CharField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical promotion campaign',
                'db_table': 'promotion_campaign_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRole',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical role',
                'db_table': 'roles_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubscriptionHistory',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('details', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical subscription history',
                'db_table': 'subscription_history_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUploadMedia',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('media_file_url', models.CharField(blank=True, max_length=255, null=True)),
                ('media_file_name', models.CharField(blank=True, max_length=250, null=True)),
                ('thumbnail', models.TextField(blank=True, max_length=100, null=True)),
                ('thumbnail_url', models.CharField(blank=True, max_length=255, null=True)),
                ('file_type', models.CharField(blank=True, max_length=120, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical upload media',
                'db_table': 'upload_media_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('password', models.CharField(blank=True, max_length=254, null=True)),
                ('remember_token', models.CharField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('phone_no', models.CharField(blank=True, help_text='Contact phone number', max_length=17, null=True)),
                ('desription', models.TextField(blank=True, null=True)),
                ('fire_base_auth_key', models.CharField(blank=True, max_length=250, null=True)),
                ('referral_id', models.CharField(blank=True, max_length=30, null=True)),
                ('wallet_address', models.BinaryField(blank=True, null=True)),
                ('wallet_private_key', models.BinaryField(blank=True, null=True)),
                ('custom_username', models.CharField(blank=True, max_length=50, null=True)),
                ('display_name', models.CharField(blank=True, max_length=40, null=True)),
                ('bio', models.CharField(blank=True, max_length=1000, null=True)),
                ('location', models.CharField(blank=True, max_length=64, null=True)),
                ('website_url', models.CharField(blank=True, max_length=100, null=True)),
                ('amazon_wishlist', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_image', models.URLField(blank=True, max_length=500, null=True)),
                ('banner_image', models.URLField(blank=True, max_length=500, null=True)),
                ('city', models.CharField(blank=True, max_length=1000, null=True)),
                ('twitter', models.CharField(blank=True, max_length=1000, null=True)),
                ('instagram', models.CharField(blank=True, max_length=1000, null=True)),
                ('discord', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('able_to_be_found', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('otp_varification', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_send_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_online', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('connections', models.IntegerField(default=0)),
                ('email_token', models.CharField(blank=True, max_length=255, null=True)),
                ('email_token_valid', models.DateTimeField(blank=True, null=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('is_referred', models.BooleanField(default=False)),
                ('user_wallet_balance', models.IntegerField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical user',
                'db_table': 'user_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUserFeeds',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical user feeds',
                'db_table': 'user_feeds_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUserFollowers',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('request_status', models.BooleanField(blank=True, default=None, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical user followers',
                'db_table': 'user_follower_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUserSession',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('device_id', models.CharField(blank=True, max_length=100, null=True)),
                ('token', models.CharField(blank=True, max_length=255, null=True)),
                ('device_type', models.CharField(blank=True, max_length=20, null=True)),
                ('app_version', models.CharField(blank=True, max_length=60, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical user session',
                'db_table': 'user_session_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUserSubscription',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('subscription_type', models.IntegerField(blank=True, help_text='1. Basic, 2. Bundle, 3. Promotion, 4. Trial', null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('reject_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical user subscription',
                'db_table': 'user_subscription_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUserSubscriptionTier',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('tier_name', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('validity_in_months', models.CharField(blank=True, max_length=10, null=True)),
                ('discount', models.CharField(blank=True, max_length=10, null=True)),
                ('final_price', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical user subscription tier',
                'db_table': 'user_subscription_tier_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalVenue',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('venueAddress', models.CharField(blank=True, max_length=500, null=True)),
                ('venueGmap', models.CharField(blank=True, max_length=500, null=True)),
                ('venueName', models.CharField(blank=True, max_length=500, null=True)),
                ('venuedataCreated', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical venue',
                'db_table': 'venue_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='MessageMedia',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('media', models.URLField(max_length=1000)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'message_media',
            },
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, null=True)),
                ('is_seen', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'messages',
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_notification', models.CharField(blank=True, max_length=264, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('page_name', models.CharField(blank=True, max_length=30, null=True)),
                ('title', models.CharField(blank=True, max_length=80, null=True)),
                ('desciption', models.CharField(blank=True, max_length=80, null=True)),
                ('type', models.CharField(blank=True, max_length=80, null=True)),
                ('profile_picture', models.URLField(blank=True, max_length=1000, null=True)),
                ('cover_picture', models.URLField(blank=True, max_length=1000, null=True)),
                ('subscribe_amount', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'page',
            },
        ),
        migrations.CreateModel(
            name='Payouts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accountHolderName', models.CharField(max_length=255, null=True)),
                ('accountNumber', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.IntegerField()),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(max_length=255, null=True)),
                ('postCode', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('paid', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'UserPayouts',
            },
        ),
        migrations.CreateModel(
            name='PostComments',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField(blank=True, null=True)),
                ('room_type', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'post_comments',
            },
        ),
        migrations.CreateModel(
            name='PostLikes',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'post_likes',
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('media', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('amount', models.IntegerField(blank=True, default=False, null=True)),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='PostsPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(blank=True, default=False, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('transaction_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('status_success', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'post_payment',
            },
        ),
        migrations.CreateModel(
            name='PromotionCampaign',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('campaign_type', models.IntegerField(default=1, help_text='1. New User, 2. Expired Subscriber User 3. Both')),
                ('offer_limit', models.IntegerField(default=5)),
                ('offer_expiration_in_days', models.IntegerField(default=5)),
                ('discount_percentage', models.FloatField(blank=True, null=True)),
                ('message', models.CharField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'promotion_campaign',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('details', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'subscription_history',
            },
        ),
        migrations.CreateModel(
            name='UploadMedia',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('media_file_url', models.CharField(blank=True, max_length=255, null=True)),
                ('media_file_name', models.CharField(blank=True, max_length=250, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='upload-media/')),
                ('thumbnail_url', models.CharField(blank=True, max_length=255, null=True)),
                ('file_type', models.CharField(blank=True, max_length=120, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'upload_media',
            },
        ),
        migrations.CreateModel(
            name='UserBankAccounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accountHolderName', models.CharField(max_length=255)),
                ('accountNumber', models.CharField(blank=True, max_length=255, null=True)),
                ('iban', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(max_length=255, null=True)),
                ('postCode', models.IntegerField(blank=True, null=True)),
                ('firstLine', models.CharField(blank=True, max_length=255, null=True)),
                ('primary', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'UserBankAccounts',
            },
        ),
        migrations.CreateModel(
            name='UserBookmarks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'user_bookmarks',
            },
        ),
        migrations.CreateModel(
            name='UserCloseFriends',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserCustomGroupMembers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserCustomLists',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserFeeds',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'user_feeds',
            },
        ),
        migrations.CreateModel(
            name='UserFollowers',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('request_status', models.BooleanField(blank=True, default=None, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'user_follower',
            },
        ),
        migrations.CreateModel(
            name='UserIdentity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(blank=True, max_length=255, null=True)),
                ('gender', models.CharField(blank=True, max_length=6, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('documentNumber', models.CharField(blank=True, max_length=255, null=True)),
                ('document_type', models.CharField(blank=True, max_length=20, null=True)),
                ('nationality', models.CharField(blank=True, max_length=50, null=True)),
                ('verified', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user_identity',
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_push_notification', models.BooleanField(default=False)),
                ('enable_email_notification', models.BooleanField(default=False)),
                ('show_full_text', models.BooleanField(default=False)),
                ('monthly_news_letter', models.BooleanField(default=False)),
                ('new_posts_summary', models.BooleanField(default=False)),
                ('new_posts_summary_time', models.IntegerField(blank=True, null=True)),
                ('new_stream', models.BooleanField(default=False)),
                ('upcoming_stream_reminder', models.BooleanField(default=False)),
                ('new_private_msg_summary', models.BooleanField(default=False)),
                ('new_private_msg_summary_time', models.IntegerField(blank=True, null=True)),
                ('receive_less_notification', models.BooleanField(default=False)),
                ('subscription_notification', models.BooleanField(default=False)),
                ('new_comment', models.BooleanField(default=False)),
                ('new_like', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='UserRecepientAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.IntegerField()),
                ('accountHolderName', models.CharField(max_length=255)),
                ('accountNumber', models.CharField(blank=True, max_length=255, null=True)),
                ('receipt_id', models.CharField(blank=True, max_length=255, null=True)),
                ('abartn', models.IntegerField()),
                ('country', models.CharField(max_length=255)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(max_length=255, null=True)),
                ('postCode', models.IntegerField()),
                ('firstLine', models.CharField(blank=True, max_length=255, null=True)),
                ('primary', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'recepient_accounts',
            },
        ),
        migrations.CreateModel(
            name='UserStories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('story', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_highlighted', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('expiration_time', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_stories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_stories',
            },
        ),
        migrations.CreateModel(
            name='WiseRecepients',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accountHolderName', models.CharField(max_length=255)),
                ('accountNumber', models.CharField(blank=True, max_length=255, null=True)),
                ('receipt_id', models.CharField(blank=True, max_length=255, null=True)),
                ('abartn', models.IntegerField()),
                ('country', models.CharField(max_length=255)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(max_length=255, null=True)),
                ('postCode', models.IntegerField()),
                ('firstLine', models.CharField(blank=True, max_length=255, null=True)),
                ('primary', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transferwise_recepients',
            },
        ),
        migrations.CreateModel(
            name='WiseQuotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sourceCurrency', models.CharField(blank=True, max_length=20, null=True)),
                ('targetCurrency', models.CharField(blank=True, max_length=20, null=True)),
                ('sourceAmount', models.CharField(blank=True, max_length=250, null=True)),
                ('quote_id', models.CharField(blank=True, max_length=250, null=True)),
                ('guid', models.CharField(blank=True, max_length=250, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transferwise_quotes',
            },
        ),
        migrations.CreateModel(
            name='WisePayments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_id', models.CharField(max_length=55)),
                ('transfer_id', models.CharField(blank=True, max_length=55, null=True)),
                ('quote_id', models.CharField(blank=True, max_length=250, null=True)),
                ('quote_uuid', models.CharField(blank=True, max_length=250, null=True)),
                ('customerTransactionId', models.CharField(blank=True, max_length=250, null=True)),
                ('receipt_id', models.CharField(blank=True, max_length=55, null=True)),
                ('transferPurpose', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transferwise_payments',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('venueAddress', models.CharField(blank=True, max_length=500, null=True)),
                ('venueGmap', models.CharField(blank=True, max_length=500, null=True)),
                ('venueName', models.CharField(blank=True, max_length=500, null=True)),
                ('venuedataCreated', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_venues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'venue',
            },
        ),
        migrations.CreateModel(
            name='UserTipReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscriptionTier',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tier_name', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('validity_in_months', models.CharField(blank=True, max_length=10, null=True)),
                ('discount', models.CharField(blank=True, max_length=10, null=True)),
                ('final_price', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='subscription_tier_page', to='api.Page')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_tier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_subscription_tier',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subscription_type', models.IntegerField(blank=True, help_text='1. Basic, 2. Bundle, 3. Promotion, 4. Trial', null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('reject_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('free_trial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='subscription_free_trial', to='api.FreeTrial')),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='page_subscription', to='api.Page')),
                ('promotion_campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='subscription_promotion_campaign', to='api.PromotionCampaign')),
                ('subscription_tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_subscription_tier', to='api.UserSubscriptionTier')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_subscription',
            },
        ),
        migrations.CreateModel(
            name='UserStoriesLikes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('story', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='liked_story', to='api.UserStories')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'story_likes',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(blank=True, max_length=100, null=True)),
                ('token', models.CharField(blank=True, max_length=255, null=True)),
                ('device_type', models.CharField(blank=True, max_length=20, null=True)),
                ('app_version', models.CharField(blank=True, max_length=60, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_session',
            },
        ),
        migrations.CreateModel(
            name='UserReferralWallet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wallet', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('referred_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referred_by', to=settings.AUTH_USER_MODEL)),
                ('user_referral', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referred_to', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='userrecepientaccount',
            index=models.Index(fields=['id'], name='recepient_a_id_7c166c_idx'),
        ),
        migrations.AddField(
            model_name='userpreferences',
            name='language',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.Language'),
        ),
        migrations.AddField(
            model_name='userpreferences',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='useridentity',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfollowers',
            name='follower',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_following', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfollowers',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_follower', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfeeds',
            name='post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_posts', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='userfeeds',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_feeds', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usercustomlists',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usercustomgroupmembers',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usercustomgroupmembers',
            name='user_custom_lists',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.UserCustomLists'),
        ),
        migrations.AddField(
            model_name='userclosefriends',
            name='close_friend',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='close_friend', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userclosefriends',
            name='main_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userbookmarks',
            name='post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookmark_post', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='userbookmarks',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userbankaccounts',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='uploadmedia',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='subscriptionhistory',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_subscription_history', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['id', 'name'], name='roles_id_1c77ee_idx'),
        ),
        migrations.AddField(
            model_name='promotioncampaign',
            name='page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='campaign_page', to='api.Page'),
        ),
        migrations.AddField(
            model_name='promotioncampaign',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='campaign_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postspayment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='postspayment',
            name='receiver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_receiver', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postspayment',
            name='sender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_sender', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='posts',
            name='page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_page', to='api.Page'),
        ),
        migrations.AddField(
            model_name='posts',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postlikes',
            name='post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='like_post', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='postlikes',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='like_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postcomments',
            name='post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_comment', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='postcomments',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payouts',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='page',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_page', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notifications',
            name='followrequest',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_followrequest', to='api.UserFollowers'),
        ),
        migrations.AddField(
            model_name='notifications',
            name='message',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='notification_message', to='api.Messages'),
        ),
        migrations.AddField(
            model_name='notifications',
            name='subscribe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='notification_subscribe', to='api.UserSubscription'),
        ),
        migrations.AddField(
            model_name='messages',
            name='chat_room',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='message_chat_room', to='api.ChatRoom'),
        ),
        migrations.AddField(
            model_name='messages',
            name='reciever',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reciever_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='messages',
            name='sender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sender_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='messagemedia',
            name='message',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reciever_user', to='api.Messages'),
        ),
        migrations.AddField(
            model_name='historicalvenue',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalvenue',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalusersubscriptiontier',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalusersubscriptiontier',
            name='page',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Page'),
        ),
        migrations.AddField(
            model_name='historicalusersubscriptiontier',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalusersubscription',
            name='free_trial',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.FreeTrial'),
        ),
        migrations.AddField(
            model_name='historicalusersubscription',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalusersubscription',
            name='page',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Page'),
        ),
        migrations.AddField(
            model_name='historicalusersubscription',
            name='promotion_campaign',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.PromotionCampaign'),
        ),
        migrations.AddField(
            model_name='historicalusersubscription',
            name='subscription_tier',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.UserSubscriptionTier'),
        ),
        migrations.AddField(
            model_name='historicalusersubscription',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalusersession',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalusersession',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluserfollowers',
            name='follower',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluserfollowers',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluserfollowers',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluserfeeds',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluserfeeds',
            name='post',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='historicaluserfeeds',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluser',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluser',
            name='user_referred_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluploadmedia',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluploadmedia',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsubscriptionhistory',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsubscriptionhistory',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalrole',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpromotioncampaign',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpromotioncampaign',
            name='page',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Page'),
        ),
        migrations.AddField(
            model_name='historicalpromotioncampaign',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalposts',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalposts',
            name='page',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Page'),
        ),
        migrations.AddField(
            model_name='historicalposts',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpostlikes',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpostlikes',
            name='post',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='historicalpostlikes',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpostcomments',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpostcomments',
            name='post',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Posts'),
        ),
        migrations.AddField(
            model_name='historicalpostcomments',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpage',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpage',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalmessages',
            name='chat_room',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.ChatRoom'),
        ),
        migrations.AddField(
            model_name='historicalmessages',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalmessages',
            name='reciever',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalmessages',
            name='sender',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalmessagemedia',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalmessagemedia',
            name='message',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Messages'),
        ),
        migrations.AddField(
            model_name='historicalfreetrial',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalfreetrial',
            name='page',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Page'),
        ),
        migrations.AddField(
            model_name='historicalfreetrial',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalevents',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalevents',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalevents',
            name='venue',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Venue'),
        ),
        migrations.AddField(
            model_name='historicalchatroom',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalchatroom',
            name='reciever',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalchatroom',
            name='sender',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='freetrial',
            name='page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trial_page', to='api.Page'),
        ),
        migrations.AddField(
            model_name='freetrial',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trial_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='events',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='events',
            name='venue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.Venue'),
        ),
        migrations.AddField(
            model_name='creditcard',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='confineusers',
            name='confine_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confine_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='confineusers',
            name='main_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='reciever',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='chat_room_reciever', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='sender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='chat_room_sender', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_referred_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='wiserecepients',
            index=models.Index(fields=['id'], name='transferwis_id_3bc592_idx'),
        ),
        migrations.AddIndex(
            model_name='wisequotes',
            index=models.Index(fields=['id'], name='transferwis_id_d3ec0b_idx'),
        ),
        migrations.AddIndex(
            model_name='wisepayments',
            index=models.Index(fields=['id'], name='transferwis_id_5a6fd3_idx'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['id'], name='venue_id_e9dfd3_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscriptiontier',
            index=models.Index(fields=['id'], name='user_subscr_id_299646_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['id'], name='user_subscr_id_d28d37_idx'),
        ),
        migrations.AddIndex(
            model_name='userstorieslikes',
            index=models.Index(fields=['id'], name='story_likes_id_ff03d0_idx'),
        ),
        migrations.AddIndex(
            model_name='userstories',
            index=models.Index(fields=['id'], name='user_storie_id_d12a11_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['id'], name='user_sessio_id_dac6cf_idx'),
        ),
        migrations.AddIndex(
            model_name='useridentity',
            index=models.Index(fields=['id'], name='user_identi_id_2b6b32_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollowers',
            index=models.Index(fields=['id'], name='user_follow_id_038269_idx'),
        ),
        migrations.AddIndex(
            model_name='userfeeds',
            index=models.Index(fields=['id'], name='user_feeds_id_8f3811_idx'),
        ),
        migrations.AddIndex(
            model_name='userbookmarks',
            index=models.Index(fields=['id'], name='user_bookma_id_c27a61_idx'),
        ),
        migrations.AddIndex(
            model_name='userbankaccounts',
            index=models.Index(fields=['id'], name='UserBankAcc_id_3e2e0d_idx'),
        ),
        migrations.AddIndex(
            model_name='uploadmedia',
            index=models.Index(fields=['id'], name='upload_medi_id_3b7ba0_idx'),
        ),
        migrations.AddIndex(
            model_name='subscriptionhistory',
            index=models.Index(fields=['id'], name='subscriptio_id_b9a359_idx'),
        ),
        migrations.AddIndex(
            model_name='promotioncampaign',
            index=models.Index(fields=['id'], name='promotion_c_id_1b830f_idx'),
        ),
        migrations.AddIndex(
            model_name='postspayment',
            index=models.Index(fields=['id'], name='post_paymen_id_892e17_idx'),
        ),
        migrations.AddIndex(
            model_name='posts',
            index=models.Index(fields=['id'], name='posts_id_acf458_idx'),
        ),
        migrations.AddIndex(
            model_name='postlikes',
            index=models.Index(fields=['id'], name='post_likes_id_f52b26_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomments',
            index=models.Index(fields=['id'], name='post_commen_id_a0a4d0_idx'),
        ),
        migrations.AddIndex(
            model_name='payouts',
            index=models.Index(fields=['id'], name='UserPayouts_id_4c5a3c_idx'),
        ),
        migrations.AddIndex(
            model_name='page',
            index=models.Index(fields=['id'], name='page_id_144a25_idx'),
        ),
        migrations.AddIndex(
            model_name='messages',
            index=models.Index(fields=['id'], name='messages_id_693144_idx'),
        ),
        migrations.AddIndex(
            model_name='messagemedia',
            index=models.Index(fields=['id'], name='message_med_id_0c44ef_idx'),
        ),
        migrations.AddIndex(
            model_name='freetrial',
            index=models.Index(fields=['id'], name='free_trial_id_0c9c59_idx'),
        ),
        migrations.AddIndex(
            model_name='events',
            index=models.Index(fields=['id'], name='events_id_e4d547_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['id'], name='chat_room_id_8bd9c4_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['id', 'first_name', 'last_name', 'email', 'is_active'], name='auth_user_id_afe805_idx'),
        ),
    ]
